#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <splash.h>
#include <Adafruit_NeoPixel.h>
#include <SoftwareSerial.h>
#include <DFPlayerMini_Fast.h>

#define BUTTON_PIN 2
#define RELOAD_BUTTON 8
#define PIXEL_PIN 6  // Digital IO pin connected to the NeoPixels.
#define PIXEL_COUNT 15  // Number of NeoPixels
#define SWITCH_POSITION_A_PIN 15
#define SWITCH_POSITION_B_PIN 16

int reloadAmmo = 10; // Number of ammo/shots
int buttonPushCounter = reloadAmmo;
int i; // Needed for FX loop
int n = 7; // Needed for FX loop
int rectOutline = 90; // Number of pixels the ammo rectangle is in height
int ammoRectPlace = 37; // Placement of rectangle
int rectFill = rectOutline / reloadAmmo;
int ammoLeft;

SoftwareSerial mySerial(11, 12); // RX, TX
DFPlayerMini_Fast myDFPlayer;

// Declare our NeoPixel strip object:
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, NEO_GRB + NEO_KHZ800);

Adafruit_SSD1306 display = Adafruit_SSD1306(128, 32, &Wire);

boolean oldState = HIGH;
boolean ammoOldState = HIGH; 

void colorWipe(uint32_t color, int wait) {
  for(int i=0; i<strip.numPixels(); i++) { // For each pixel in strip...
    strip.setPixelColor(i, color);         //  Set pixel's color (in RAM)
    strip.show();                          //  Update strip to match
    delay(wait);                           //  Pause for a moment
  }
}

void setup() {
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(RELOAD_BUTTON, INPUT_PULLUP);
  pinMode(SWITCH_POSITION_A_PIN, INPUT_PULLUP);      
  pinMode(SWITCH_POSITION_B_PIN, INPUT_PULLUP);
  strip.begin(); // Initialize NeoPixel strip object (REQUIRED)
  strip.show();  // Initialize all pixels to 'off'
  Serial.begin(115200);
  mySerial.begin(9600);
  myDFPlayer.begin(mySerial);
  myDFPlayer.play(1); //play mp3 file with leading identifier "0001"

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // Address 0x3C for 128x32

  Serial.println("OLED begun");
  display.display();
  delay(1000);

  // Clear the buffer.
  display.clearDisplay();
  display.display();

  // text display tests
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.display(); // actually display all of the above
  display.setRotation(3);  
}

void blaster() {
  myDFPlayer.volume(20); //set volume low
  while(0); //halt
}

void shooting(int sound, int color, int repeat){
    // Get current button state.
  boolean newState = digitalRead(BUTTON_PIN); 
  // Check if state changed from high to low (button press).
  if((newState == LOW) && (oldState == HIGH)) {
    // Short delay to debounce button.
    delay(20);
    // Check if button is still low after debounce.
    newState = digitalRead(BUTTON_PIN);
    if(newState == LOW) {      // Yes, still low 
      buttonPushCounter--;
      ammoLeft++;
      blaster();
      myDFPlayer.play(sound); // which sound on the DFPLayer do you want?
      rectFill = rectOutline / reloadAmmo;
      for (int i = 0; i < repeat; i++) {      
        if(color == 'red'){
          colorWipe(strip.Color(255,   0,   0), 2);
        } else if (color == 'orange'){
          colorWipe(strip.Color(255,   100,   0), 9);
        } else if (color == 'blue') {
          colorWipe(strip.Color(0,   9,   255), 2);
        }
        colorWipe(strip.Color(  0,   0,   0), 1);    // Black/off
      }                                                     
    }
  }

  // Set the last-read button state to the old state.
  oldState = newState;

  delay(20);
  display.clearDisplay();
  display.setCursor(0,0);
  display.setTextSize(1);

  if(color == 'red'){
    display.println("RPT"); 
    Serial.println("Repeat");
  } else if (color == 'orange'){
    display.println("Sting");
    Serial.println("Sting"); 
  } else if (color == 'blue') {
    display.println("Stun"); 
    Serial.println("STUN");
  }  
  
}



void loop(){
  display.setCursor(0,0);

  int READ_SWITCH_POSITION_A = digitalRead(SWITCH_POSITION_A_PIN);
  int READ_SWITCH_POSITION_B = digitalRead(SWITCH_POSITION_B_PIN);

  boolean newState = digitalRead(BUTTON_PIN);
  boolean ammoNewState = digitalRead(RELOAD_BUTTON);


  if (buttonPushCounter <= 0) {
    newState = HIGH;
    Serial.println("Out of Ammo!");
//    display.drawRect(0, ammoRectPlace, 32, rectOutline, WHITE);    
    display.display();    
  } else { 
    Serial.println(ammoLeft);
    if(READ_SWITCH_POSITION_A == HIGH && READ_SWITCH_POSITION_B == HIGH){
      //stun();         
      shooting(4, 'blue', 7);
    } else if(READ_SWITCH_POSITION_A == LOW && READ_SWITCH_POSITION_B == HIGH){
      //repeating();
      shooting(4, 'red', 1);
    } else if(READ_SWITCH_POSITION_A == HIGH && READ_SWITCH_POSITION_B == LOW){
      //sting();
      shooting(4, 'orange', 1);        
    }
    Serial.println("PLenty of Ammo");
    display.setCursor(0,20);
    display.setTextSize(1.25);
    if (buttonPushCounter < 10) {
      display.print(" 00") + 
      display.println(buttonPushCounter);
    } else if (buttonPushCounter >= 10) {
      display.print(" 0");
      display.println(buttonPushCounter);      
    } else if (buttonPushCounter >= 100) {
      display.println(buttonPushCounter);
    }
    int ammo = buttonPushCounter * rectFill;
    display.drawRect(0, ammoRectPlace, 32, rectOutline, WHITE);
    if (buttonPushCounter == reloadAmmo) {
      display.fillRect(0, ammoRectPlace, 32, rectOutline, WHITE);      
    } else {
      display.fillRect(0, ammoRectPlace + rectFill * ammoLeft, 32, rectOutline, WHITE);
    }
  }

  if((ammoNewState == LOW) && (ammoOldState == HIGH)) {
    // Short delay to debounce button.
    delay(20);
    if(ammoNewState == LOW) { 
      buttonPushCounter = reloadAmmo;
    }
  }

  ammoOldState = ammoNewState;
  display.display();
}
