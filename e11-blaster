#include <Adafruit_NeoPixel.h>
#include <SoftwareSerial.h>
#include <DFPlayerMini_Fast.h>

#define BUTTON_PIN 2
#define PIXEL_PIN 6  // Digital IO pin connected to the NeoPixels.
#define PIXEL_COUNT 15  // Number of NeoPixels
#define SWITCH_POSITION_A_PIN 15
#define SWITCH_POSITION_B_PIN 16

int buttonPushCounter = 0;
int i; // Needed for FX loop
int n = 7; // Needed for FX loop

SoftwareSerial mySerial(11, 12); // RX, TX
DFPlayerMini_Fast myDFPlayer;

// Declare our NeoPixel strip object:
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, NEO_GRB + NEO_KHZ800);

boolean oldState = HIGH;

void colorWipe(uint32_t color, int wait) {
  for(int i=0; i<strip.numPixels(); i++) { // For each pixel in strip...
    strip.setPixelColor(i, color);         //  Set pixel's color (in RAM)
    strip.show();                          //  Update strip to match
    delay(wait);                           //  Pause for a moment
  }
}

void setup() {
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(SWITCH_POSITION_A_PIN, INPUT_PULLUP);      
  pinMode(SWITCH_POSITION_B_PIN, INPUT_PULLUP);
  strip.begin(); // Initialize NeoPixel strip object (REQUIRED)
  strip.show();  // Initialize all pixels to 'off'
  Serial.begin(115200);
  mySerial.begin(9600);
  myDFPlayer.begin(mySerial);
  myDFPlayer.play(1); //play mp3 file with leading identifier "0001"
}

void blaster() {
  myDFPlayer.volume(20); //set volume low
  while(0); //halt
}

void sting(){
    // Get current button state.
  boolean newState = digitalRead(BUTTON_PIN);
  // Check if state changed from high to low (button press).
  if((newState == LOW) && (oldState == HIGH)) {
    // Short delay to debounce button.
    delay(20);
    // Check if button is still low after debounce.
    newState = digitalRead(BUTTON_PIN);
    if(newState == LOW) {      // Yes, still low
      Serial.println("Trigger!");
      buttonPushCounter++;
      blaster();
      myDFPlayer.play(4); //play mp3 file with leading identifier "0001"
      colorWipe(strip.Color(255,   100,   0), 9); // Red
      colorWipe(strip.Color(  0,   0,   0), 1);    // Black/off                                        
    }
  }

  // Set the last-read button state to the old state.
  oldState = newState;
}

void repeating(){
    // Get current button state.
  boolean newState = digitalRead(BUTTON_PIN); 
  // Check if state changed from high to low (button press).
  if((newState == LOW) && (oldState == HIGH)) {
    // Short delay to debounce button.
    delay(20);
    // Check if button is still low after debounce.
    newState = digitalRead(BUTTON_PIN);
    if(newState == LOW) {      // Yes, still low 
      blaster();
      myDFPlayer.play(2); //play mp3 file with leading identifier "0002" 
      colorWipe(strip.Color(255,   0,   0), 2); // Red
      colorWipe(strip.Color(  0,   0,   0), 1); // Black/off        
                                         
    }
  }

  // Set the last-read button state to the old state.
  oldState = newState;
}

void stun(){
    // Get current button state.
  boolean newState = digitalRead(BUTTON_PIN);
  // Check if state changed from high to low (button press).
  if((newState == LOW) && (oldState == HIGH)) {
    // Short delay to debounce button.
    delay(20);
    // Check if button is still low after debounce.
    newState = digitalRead(BUTTON_PIN);
    if(newState == LOW) {      // Yes, still low
      blaster(); 
      myDFPlayer.play(3); //play mp3 file with leading identifier "0002"
      for (int i = 0; i < n; i++) {      
        colorWipe(strip.Color(0,   9,   255), 2); // Blue
        colorWipe(strip.Color(  0,   0,   0), 1);    // Black/off
      }                                
    }
  }

  // Set the last-read button state to the old state.
  oldState = newState;
}

void loop(){
  int READ_SWITCH_POSITION_A = digitalRead(SWITCH_POSITION_A_PIN);
  int READ_SWITCH_POSITION_B = digitalRead(SWITCH_POSITION_B_PIN);

  boolean newState = digitalRead(BUTTON_PIN);   

  if(READ_SWITCH_POSITION_A == HIGH && READ_SWITCH_POSITION_B == HIGH){
    stun();
    Serial.println("Stun");
  } else if(READ_SWITCH_POSITION_A == LOW && READ_SWITCH_POSITION_B == HIGH){
    repeating();
    Serial.println("Repeating");
  } else if(READ_SWITCH_POSITION_A == HIGH && READ_SWITCH_POSITION_B == LOW){
    sting();
    Serial.println("Sting");
  }

  if (buttonPushCounter >= 4) {
    newState = HIGH;
    Serial.println("Out of Ammo!");
  } else {
    Serial.println("PLenty of Ammo");
  }
  
}
